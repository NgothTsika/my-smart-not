// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 1. NextAuth required models
model User {
  id             String   @id @default(cuid())
  name           String?
  email          String?  @unique
  emailVerified  DateTime?
  image          String?

  hashedPassword String?  // <- required for credentials login

  accounts       Account[]
  sessions       Session[]
  documents      Document[] // your Notion clone docs
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Document {
  id               String     @id @default(cuid())
  title            String
  userId           String
  isArchived       Boolean
  parentDocumentId String?   
  content          String?
  coverImage       String?
  icon             String?
  isPublished      Boolean

  // Relations
  user             User       @relation(fields: [userId], references: [id])
  parentDocument   Document?  @relation("ParentChild", fields: [parentDocumentId], references: [id])
  children         Document[] @relation("ParentChild")

  @@index([userId], name: "by_user")
  @@index([userId, parentDocumentId], name: "by_user_parent")
}
